#!/usr/bin/env bash
# pgclone: prepares a PostgreSQL physical replica by syncing from primary
# REQUIREMENT: Only supports physical replication, PostgreSQL 15+
# NOTE: Can optionally use a transient replication slot for pg_receivewal (see --slot)

set -euo pipefail

PGCLONE_VERSION="1.2.0"

# ==== Default parameters ====
PGPORT=5432                 # TCP port of the primary Postgres instance (default 5432)
REPLICA_WALDIR=""           # Destination pg_wal directory on the replica;
                            # empty ⇒ use "$REPLICA_PGDATA/pg_wal"
TEMP_WALDIR=""              # Temporary directory where pg_receivewal stores incoming WAL;
                            # empty ⇒ auto-create under /tmp
PARALLEL=4                  # Number of simultaneous rsync workers for base/tablespace copy
VERBOSE=0                   # 1 = print detailed progress/debug logs, 0 = quiet
# Progress indicator defaults
PROGRESS_MODE="auto"        # auto|bar|plain|none
PROGRESS_INTERVAL=30        # seconds between plain-mode updates

# replication slot option (disabled by default)
USE_SLOT=0                  # 1 = create temporary replication slot, 0 = disabled
SLOT_NAME=""               # Assigned when USE_SLOT=1

# SSH security option
INSECURE_SSH=0              # 1 = disable StrictHostKeyChecking (MITM risk); 0 = enforced by default

RSYNCD_PORT_RANGE="45000..45100"   # Port range to search for a free TCP port when
                                   # starting the transient rsync daemon on the primary

# --- behaviour flags (set via CLI) ---
DROP_EXISTING=0            # 1 = remove existing replica pgdata and pg_wal before cloning
DEBUG=0                    # 1 = enable bash tracing (`set -x`)
KEEP_RUN_TMP=0             # 1 = preserve RUN_TMPDIR after script finishes

# ---- timeouts (seconds) ----
# These can be overridden via environment variables before running the script.
RSYNCD_GET_PORT_TIMEOUT=${RSYNCD_GET_PORT_TIMEOUT:-30}   # Max time (s) to wait for the primary to report the chosen rsyncd port
REPLICATION_START_TIMEOUT=${REPLICATION_START_TIMEOUT:-60} # Wait (s) for pg_receivewal to appear in pg_stat_replication
PROCESS_TERM_TIMEOUT=${PROCESS_TERM_TIMEOUT:-60}          # Grace period (s) after SIGTERM before a child process is force-killed
WAL_WAIT_TIMEOUT=${WAL_WAIT_TIMEOUT:-60}                  # Wait (s) for the WAL segment containing STOP_LSN to arrive

declare -A TBLSPCS=()          # oid -> src (master)
declare -A TBLSPCS_SIZE_KB=()  # oid -> size KB
declare -A TBLSPCS_DST=()      # oid -> dst (replica)

# ==== Global state ====
PG_RECEIVEWAL_PID=""
PG_RECEIVEWAL_WATCHDOG_PID=""
CLEANUP_DONE=0
RSYNC_SECRET=""
RSYNCD_SSH_PID=""
RSYNCD_WATCHDOG_PID=""
PSQL_WATCHDOG_PID=""
RSYNC_LOGFILES=()
RUN_TMPDIR=""
PIDFILE=""
PGCLONE_MAIN_PID=""

# ==== Logging ====
log() { [[ "$VERBOSE" == "1" ]] && echo "[$(date '+%F %T')] [pgclone] $*" >&2; return 0; }
err() { echo "[$(date '+%F %T')] FATAL: $*" >&2; }
fatal() { err "$@"; exit 1; }

# ==== Cleanup ====
# shellcheck disable=SC2317
cleanup() {
    local rc=$?
    local reason="$1"

    [[ "$CLEANUP_DONE" == "1" ]] && return
    CLEANUP_DONE=1

    # Disable further traps because we're in cleanup mode
    trap '' TERM INT ERR
    trap - EXIT

    if [[ "$reason" != "EXIT" ]]; then
        if [[ "$rc" == "0" ]]; then
            rc=1
        fi
        log "$reason received, cleaning up and exiting with rc=$rc"
    fi

    log "Running cleanup (rc=$rc)..."

    # Stop pg_receivewal watchdog
    if [[ -n "${PG_RECEIVEWAL_WATCHDOG_PID:-}" ]]; then
        kill "$PG_RECEIVEWAL_WATCHDOG_PID" 2>/dev/null || true
        wait_and_kill_process "$PG_RECEIVEWAL_WATCHDOG_PID" "pg_receivewal watchdog"
    fi

    # Stop pg_receivewal
    if [[ -n "${PG_RECEIVEWAL_PID:-}" ]]; then
        log "Killing pg_receivewal PID=$PG_RECEIVEWAL_PID"
        kill "$PG_RECEIVEWAL_PID" 2>/dev/null || true
        wait_and_kill_process "$PG_RECEIVEWAL_PID" "pg_receivewal"
    fi

    # Stop rsyncd on master via ssh PID
    if [[ -n "${RSYNCD_SSH_PID:-}" ]]; then
        log "Stopping rsyncd (via SSH PID=$RSYNCD_SSH_PID)..."
        kill "$RSYNCD_SSH_PID" 2>/dev/null || true
        wait_and_kill_process "$RSYNCD_SSH_PID" "rsyncd ssh session"
    fi

    # Stop rsyncd watchdog
    if [[ -n "${RSYNCD_WATCHDOG_PID:-}" ]]; then
        kill "$RSYNCD_WATCHDOG_PID" 2>/dev/null || true
        wait_and_kill_process "$RSYNCD_WATCHDOG_PID" "rsyncd watchdog"
    fi

    # Stop psql watchdog
    if [[ -n "${PSQL_WATCHDOG_PID:-}" ]]; then
        kill "$PSQL_WATCHDOG_PID" 2>/dev/null || true
        wait_and_kill_process "$PSQL_WATCHDOG_PID" "psql watchdog"
    fi

    # Stop psql
    if [[ -n "${PSQL_PID:-}" ]]; then
        log "Killing psql PID=$PSQL_PID"
        kill -9 "$PSQL_PID" 2>/dev/null || true
        wait "$PSQL_PID" 2>/dev/null || true
    fi

    # Removing temp WAL dir content
    if [[ -d "${TEMP_WALDIR:-}" ]]; then
        log "Removing temp WAL dir $TEMP_WALDIR content..."
        find "$TEMP_WALDIR" -mindepth 1 -delete
    fi

    # Drop temporary replication slot if it was created
    if [[ "$USE_SLOT" == "1" && -n "${SLOT_NAME:-}" ]]; then
        log "Dropping replication slot $SLOT_NAME via pg_receivewal..."
        pg_receivewal \
            --host="$PGHOST" --port="$PGPORT" --username="$PGUSER" \
            --no-password --drop-slot --slot="$SLOT_NAME" >/dev/null 2>&1 || true
    fi

    # --- ensure no children processes remain -------------------
    for cpid in $(pgrep -P "$PGCLONE_MAIN_PID" 2>/dev/null || true); do
        if kill -0 "$cpid" 2>/dev/null; then
            cmd=$(ps -o comm= -p "$cpid" 2>/dev/null || true)
            log "Cleaning up child process PID=$cpid, CMD=$cmd"
            terminate_pid "$cpid" "$cmd" "TERM"
        fi
    done

    # Remove run-scoped temporary directory (unless --keep-run-tmp)
    if [[ "$KEEP_RUN_TMP" == "1" ]]; then
        log "--keep-run-tmp set, keeping $RUN_TMPDIR for inspection"
    else
        log "Removing run-scoped temporary directory $RUN_TMPDIR..."
        [[ -d "${RUN_TMPDIR:-}" ]] && rm -rf "$RUN_TMPDIR"
    fi

    # Cleanup lock if exists
    if [[ -n "${LOCK_FILE:-}" && -f "$LOCK_FILE" ]]; then
        # Delete the lock file only if we still hold its file descriptor 
        # (i.e., the file descriptor is still open).
        if flock -n 200; then
            log "Removing lock file $LOCK_FILE..."
            rm -f "$LOCK_FILE"
        fi
    fi

    log "Cleanup complete (rc=$rc)"
    exit "$rc"
}

trap 'cleanup EXIT' EXIT
trap 'cleanup TERM' TERM
trap 'cleanup INT' INT
trap 'cleanup ERR' ERR


# ==== Helpers ====

# Safe shell quoting for remote commands
shquote() {
    # printf %q gives POSIX-compatible escaped string
    printf '%q' "$1"
}

# Wrapper for one-liner SSH commands executed with strict bash flags on the remote side.
# Usage: ssh_exec "<command string>"
ssh_exec() {
    # Executes given command string on the primary via SSH with provided options.
    # Usage: ssh_exec "cmd arg1 arg2"
    # shellcheck disable=SC2029
    ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "$@"
}

terminate_pid() {
    # Usage: terminate_pid <pid> <name> [<first_signal>]
    # <first_signal> – optional initial signal to send (e.g. TERM). If omitted, assumes it was sent earlier.
    local pid="$1" name="$2" first_sig="${3:-}"

    # Validate PID and process existence
    [[ -z "$pid" || ! "$pid" =~ ^[0-9]+$ ]] && return 0
    kill -0 "$pid" 2>/dev/null || return 0

    # Optionally send the initial (graceful) signal
    if [[ -n "$first_sig" ]]; then
        kill -"$first_sig" "$pid" 2>/dev/null || true
    fi

    # Wait until the process exits or timeout expires, then escalate to SIGKILL
    # shellcheck disable=SC2155
    local t0=$(date +%s)
    while kill -0 "$pid" 2>/dev/null; do
        (( $(date +%s) - t0 >= PROCESS_TERM_TIMEOUT )) && {
            log "$name (PID=$pid) did not exit within ${PROCESS_TERM_TIMEOUT}s — sending SIGKILL"
            kill -KILL "$pid" 2>/dev/null || true
            break
        }
        sleep 1
    done

    # Reap the child process to avoid zombie (if it is our child)
    wait "$pid" 2>/dev/null || true
}

# Wrapper preserved for backward compatibility
wait_and_kill_process() {
    terminate_pid "$1" "$2"
}

# Wrapper preserved for backward compatibility
watchdog_terminate () {
    terminate_pid "$1" "$2" "TERM"
}

validate_lsn_format() {
    [[ "$1" =~ ^[0-9A-F]+/[0-9A-F]+$ ]] || fatal "Invalid LSN format: $1"
}

validate_ssh_key() {
    local key="$1"
    [[ -f "$key" && -r "$key" ]] || fatal "SSH key missing or unreadable: $key"
}

estimate_primary_size_mb() {
    log "Estimating primary data size..."
    local kb
    # shell-quote PGDATA before passing to the remote shell
    # shellcheck disable=SC2029
    kb=$(ssh_exec "du -sk $(shquote "$PRIMARY_PGDATA")" |
         awk '{print $1}')
    [[ "$kb" =~ ^[0-9]+$ ]] || fatal "du failed on primary"
    echo $((kb / 1024))
}

# ---------------------------------------------------------------
# check_space <assoc-array-name>
#   <assoc-array-name>[mount_point] = required_kilobytes
# ---------------------------------------------------------------
# shellcheck disable=SC2004
check_space () {
    local -n need_kb=$1          # bash nameref (>=4.3)

    for mp in "${!need_kb[@]}"; do
        local avail_kb
        avail_kb=$(df -P "$mp" | awk 'NR==2{print $4}')

        if (( avail_kb < need_kb[$mp] )); then            # <-- $mp
            fatal "Insufficient disk space on $mp: $((avail_kb/1024)) MB "\
                  "< $((need_kb[$mp]/1024)) MB required"  # <-- $mp
        fi
        log "Disk OK on $mp: $((avail_kb/1024)) MB free "\
            "(need $((need_kb[$mp]/1024)) MB)"            # <-- $mp
    done
}

# shellcheck disable=SC2029
discover_tablespaces() {
    local pgdata_q
    pgdata_q=$(shquote "$PRIMARY_PGDATA")

    while IFS='|' read -r oid src size; do
        [[ -z $oid || -z $src ]] && continue
        TBLSPCS[$oid]="$src"
        TBLSPCS_SIZE_KB[$oid]="$size"
        TBLSPCS_DST[$oid]="$src"
        log "Discovered tablespace: OID=$oid, src=$src, size=${size}KB"
    done < <(
        ssh_exec \
            "for l in ${pgdata_q}/pg_tblspc/*; do
                 [ -L \"\$l\" ] || continue
                 oid=\$(basename \"\$l\")
                 tgt=\$(readlink -f \"\$l\")
                 sz=\$(du -sk \"\$tgt\" | awk '{print \$1}')
                 echo \"\$oid|\$tgt|\$sz\"
             done"
    )
}

# Wait until the walreceiver connection shows up in pg_stat_replication
wait_for_replication_start() {
    local appname t0 timeout
    appname="$1" 
    timeout=$REPLICATION_START_TIMEOUT
    t0=$(date +%s)
    log "Waiting for WAL stream to appear in pg_stat_replication (timeout=${timeout}s)..."
    while (( $(date +%s) - t0 < timeout )); do
        # Ensure pg_receivewal is still alive
        kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null \
            || fatal "pg_receivewal exited"

        # Check pg_stat_replication for our application_name
        local result
        result=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" \
            -w -X -A -t -v ON_ERROR_STOP=1 \
            -c "SELECT EXISTS (SELECT 1 FROM pg_stat_replication WHERE application_name = '$appname')::int;")
        if [[ "${result//[[:space:]]/}" == "1" ]]; then
            log "WAL streaming is active, continuing..."
            return 0
        fi
        sleep 1
    done
    fatal "Timeout ${timeout}s: WAL streaming did not start"
}

format_bytes() {
    # Human-readable IEC units (up to PiB). Falls back to awk if numfmt unavailable.
    local b="$1"
    if command -v numfmt >/dev/null 2>&1; then
        numfmt --to=si --suffix="B" --format="%.1f" "$b"
    else
        awk -v bytes="$b" '
        function human(x) {
            split("B KB MB GB TB PB", u)
            i=1; while (x>=1000 && i<6) {x/=1000; ++i} printf("%.1f %s", x, u[i])
        } BEGIN {human(bytes)}'
    fi
}

bytes_from_str() {
    # Convert "3.36T", "357M", "1,024" → bytes (integer). Supports K/M/G/T/P.
    local s="${1,,}"            # to lowercase
    s="${s//,/}"                # remove thousands separators
    s="${s// bytes/}"
    s="${s//byte/}"
    s="${s// /}"                # remove spaces
    s="${s//i/}"                # drop 'i' in KiB/MiB units
    local unit="${s: -1}"
    local num
    if [[ $unit =~ [KkMmGgTtPp] ]]; then
        num="${s::-1}"
    else
        unit=""
        num="$s"
    fi
    num="${num//,/}"
    num="${num//,/}"
    local mul=1

    # Return 0 if number part empty (unexpected input)
    [[ -z "$num" ]] && { echo 0; return; }

    case "$unit" in
        K|k) mul=1024;;
        M|m) mul=$((1024**2));;
        G|g) mul=$((1024**3));;
        T|t) mul=$((1024**4));;
        P|p) mul=$((1024**5));;
    esac
    awk -v n="${num//,/.}" -v m="$mul" 'BEGIN{printf "%.0f", n*m}'
}

aggregate_rsync_stats() {
    # Usage: aggregate_rsync_stats logfile1 logfile2 ...
    local logfiles=("$@")
    local line val
    local num_files=0 created_files=0 deleted_files=0 reg_transferred=0
    local total_file_size=0 total_transferred_size=0 literal_data=0 matched_data=0
    local file_list_size=0 file_list_gen_time=0 file_list_tx_time=0
    local bytes_sent=0 bytes_received=0

    # (debug logs removed)
    for lf in "${logfiles[@]}"; do
        while IFS= read -r line; do
            case "$line" in
                "Number of files:"*)
                    val=$(echo "$line" | grep -oE '[0-9]+' | head -1)
                    [[ -z "$val" ]] && val=0
                    (( num_files += val )) ;;
                "Number of created files:"*)
                    val=$(echo "$line" | grep -oE '[0-9]+' | head -1)
                    [[ -z "$val" ]] && val=0
                    (( created_files += val )) ;;
                "Number of deleted files:"*)
                    val=$(echo "$line" | grep -oE '[0-9]+' | head -1)
                    [[ -z "$val" ]] && val=0
                    (( deleted_files += val )) ;;
                "Number of regular files transferred:"*)
                    val=$(echo "$line" | grep -oE '[0-9]+' | head -1)
                    [[ -z "$val" ]] && val=0
                    (( reg_transferred += val )) ;;
                "Total file size:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    total_file_size=$(( total_file_size + $(bytes_from_str "$val") )) ;;
                "Total transferred file size:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    total_transferred_size=$(( total_transferred_size + $(bytes_from_str "$val") )) ;;
                "Literal data:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    literal_data=$(( literal_data + $(bytes_from_str "$val") )) ;;
                "Matched data:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    matched_data=$(( matched_data + $(bytes_from_str "$val") )) ;;
                "File list size:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    file_list_size=$(( file_list_size + $(bytes_from_str "$val") )) ;;
                "File list generation time:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    file_list_gen_time=$(awk -v a="$file_list_gen_time" -v b="${val//,/}" 'BEGIN{printf "%.3f", a+b}') ;;
                "File list transfer time:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    file_list_tx_time=$(awk -v a="$file_list_tx_time" -v b="${val//,/}" 'BEGIN{printf "%.3f", a+b}') ;;
                "Total bytes sent:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    bytes_sent=$(( bytes_sent + $(bytes_from_str "$val") )) ;;
                "Total bytes received:"*)
                    val=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
                    bytes_received=$(( bytes_received + $(bytes_from_str "$val") )) ;;
                "sent "*)
                    # final summary line
                    sent=$(echo "$line" | awk '{print $2}')
                    recv=$(echo "$line" | awk '{print $5}')
                    bytes_sent=$(( bytes_sent + $(bytes_from_str "$sent") ))
                    bytes_received=$(( bytes_received + $(bytes_from_str "$recv") )) ;;
            esac
        done < "$lf" || true
    done

    local total_bytes=$(( bytes_sent + bytes_received ))
    local elapsed=$(( $(date +%s) - AGGR_START_EPOCH ))
    (( elapsed == 0 )) && elapsed=1
    local speed=$(( total_bytes / elapsed ))

    # ---------- output ----------
    echo
    printf "Number of files: %'d\n" "$num_files"
    printf "Number of created files: %'d\n" "$created_files"
    printf "Number of deleted files: %'d\n" "$deleted_files"
    printf "Number of regular files transferred: %'d\n" "$reg_transferred"
    printf "Total file size: %s\n" "$(format_bytes "$total_file_size")"
    printf "Total transferred file size: %s\n" "$(format_bytes "$total_transferred_size")"
    printf "Literal data: %s\n" "$(format_bytes "$literal_data")"
    printf "Matched data: %s\n" "$(format_bytes "$matched_data")"
    printf "File list size: %s\n" "$(format_bytes "$file_list_size")"
    printf "File list generation time: %.3f seconds\n" "$file_list_gen_time"
    printf "File list transfer time: %.3f seconds\n" "$file_list_tx_time"
    printf "Total bytes sent: %s\n" "$(format_bytes "$bytes_sent")"
    printf "Total bytes received: %s\n" "$(format_bytes "$bytes_received")"
    echo
    printf "sent %s  received %s  %s/sec\n" \
        "$(format_bytes "$bytes_sent")" \
        "$(format_bytes "$bytes_received")" \
        "$(format_bytes "$speed")"

    # (debug summary removed)
}

# $1 = rsync-module, $2 = dst
parallel_rsync_module() {
    local module="$1" dst="$2"
    local part_prefix file_raw file_sorted

    # Use a secure temp directory to avoid name races (no -u)
    local part_dir
    part_dir=$(TMPDIR="$RUN_TMPDIR" mktemp -d -t pgclone_part_"${module}".XXXXXX)
    part_prefix="$part_dir/part"

    file_raw=$(TMPDIR="$RUN_TMPDIR" mktemp -t pgclone_raw_"${module}".XXXXXX)
    file_sorted=$(TMPDIR="$RUN_TMPDIR" mktemp -t pgclone_sorted_"${module}".XXXXXX)

    for ((i=0;i<PARALLEL;i++)); do :>"${part_prefix}_$i"; done

    # LC_ALL=C is required to ensure consistent format for numeric fields
    # awk removes thousands separators (e.g. 1,000,000 -> 1000000)
    LC_ALL=C rsync --list-only --recursive \
      --password-file="$RSYNC_SECRET_FILE" \
      "rsync://replica@$PGHOST:$RSYNC_PORT/$module/" |
      awk '$1 ~ /^-/ {gsub(/[.,]/, "", $2); print $2 "\t" $5}' > "$file_raw"
    sort -nr "$file_raw" > "$file_sorted"

    # --- Distribute files across workers (ring-hop heuristic) --------------------
    #  1. `file_sorted` contains every file in the module, sorted by size (largest first).
    #  2. `chunksize[i]` keeps current total size assigned to worker *i*.
    #  3. We advance a cursor `cur` over the worker indexes in a "ring":
    #      cur, cur+1, cur+2 ... (mod PARALLEL).
    #    Before appending the next file we look one step ahead (`nxt`) —
    #    if the next worker currently has a smaller cumulative size than
    #    the current one, we hop to it (`cur = nxt`). This simple rule
    #    evens the load without full bin-packing.
    #  4. The selected worker's file list is written to `${part_prefix}_$cur`
    #    and its `chunksize` is updated.
    #
    #  After the loop we recreate the directory tree locally:
    #   `file_raw` still has "size<TAB>path" pairs. We strip the path,
    #   take parent directories, deduplicate and `mkdir -p` each of them
    #   under the destination.  This ensures every sub-directory exists
    #   before rsync starts with `--relative`.
    # -----------------------------------------------------------------------------

    declare -a chunksize; for ((i=0;i<PARALLEL;i++)); do chunksize[i]=0; done
    cur=0
    while IFS=$'\t' read -r sz path; do
        [[ $sz =~ ^[0-9]+$ ]] || fatal "unexpected size string \"$sz\" from rsync --list-only"
        nxt=$(( (cur+1)%PARALLEL ))
        (( chunksize[nxt] < chunksize[cur] )) && cur=$nxt
        echo "$path" >> "${part_prefix}_$cur"
        chunksize[cur]=$(( chunksize[cur]+sz ))
    done < "$file_sorted"

    awk -F'\t' '{print $2}' "$file_raw" | awk -F/ 'NF>1{NF--;print}' OFS=/ | sort -u |
        while read -r d; do mkdir -p "$dst/$d"; done

    # ---- total bytes for progress ----
    local total_bytes
    total_bytes=$(awk -F'\t' '{s+=$1} END{print s}' "$file_raw")
    [[ -z "$total_bytes" ]] && total_bytes=0

    if (( total_bytes == 0 )); then
        log "[rsync] Module $module: nothing to transfer (empty file list)"
        rm -f "$file_raw" "$file_sorted" "${part_prefix}"*
        rmdir "$part_dir" 2>/dev/null || true
        return 0
    fi

    # ---------------- Progress infrastructure ------------------
    local progress_pipe
    progress_pipe=$(TMPDIR="$RUN_TMPDIR" mktemp -u -t pgclone_pipe_"${module}".XXXXXX)
    mkfifo "$progress_pipe"

    AGGR_START_EPOCH=$(date +%s)

    # Aggregator background process
    (
        local transferred=0 start last_print bar_width=40
        start=$AGGR_START_EPOCH
        last_print=$start
        local show_bar=0 show_plain=0
        case "$PROGRESS_MODE" in
            bar)   show_bar=1 ;;
            plain) show_plain=1 ;;
            auto)
                if [[ -t 1 ]]; then show_bar=1; else show_plain=0; fi ;;
            none|"") : ;;
        esac

        local interval=$PROGRESS_INTERVAL

        while read -r sz; do
            [[ -z "$sz" ]] && continue
            [[ ! "$sz" =~ ^[0-9]+$ ]] && continue
            transferred=$(( transferred + sz ))
            local now
            now=$(date +%s)

            if (( show_bar && now - last_print >= 1 )); then
                local percent=$(( transferred * 100 / total_bytes ))
                (( percent > 100 )) && percent=100
                local filled=$(( percent * bar_width / 100 ))
                printf '\r[' >&2
                if (( filled > 0 )); then printf '#%.0s' $(seq 1 $filled) >&2; fi
                local remaining=$(( bar_width - filled ))
                if (( remaining > 0 )); then printf -- '-%.0s' $(seq 1 $remaining) >&2; fi
                printf "] %3d %% (%s / %s)" "$percent" "$(format_bytes "$transferred")" "$(format_bytes "$total_bytes")" >&2
                last_print=$now
            elif (( show_plain && now - last_print >= interval )); then
                local percent=$(( transferred * 100 / total_bytes ))
                (( percent > 100 )) && percent=100
                local speed=$(( (now - start) > 0 ? transferred / (now - start) : 0 ))
                local remaining=$(( total_bytes - transferred ))
                local eta=$(( speed > 0 ? remaining / speed : 0 ))
                printf "[%s] %3d %%  (%s / %s, %s/s, ETA %02d:%02d:%02d)\n" \
                    "$(date '+%F %T')" "$percent" \
                    "$(format_bytes "$transferred")" "$(format_bytes "$total_bytes")" \
                    "$(format_bytes "$speed")" $(( eta/3600 )) $(( (eta%3600)/60 )) $(( eta%60 )) >&2
                last_print=$now
            fi
        done <"$progress_pipe"

        # Final output
        local duration=$(( $(date +%s) - start ))
        (( duration==0 )) && duration=1
        local speed_final=$(( total_bytes / duration ))
        if (( show_bar )); then
            printf "\r[" >&2; printf '#%.0s' $(seq 1 $bar_width) >&2; printf "] 100 %% (%s / %s)\n" \
                "$(format_bytes "$total_bytes")" "$(format_bytes "$total_bytes")" >&2
        elif (( show_plain )); then
            printf "[%s] 100 %%  (%s / %s, %s/s)\n" \
                "$(date '+%F %T')" "$(format_bytes "$total_bytes")" "$(format_bytes "$total_bytes")" \
                "$(format_bytes "$speed_final")" >&2
        fi
    ) &
    AGGR_PID=$!

    # Keep writer FD open in parent *after* reader exists to avoid blocking on FIFO
    exec {PROG_FD}>"$progress_pipe"

    # run rsync workers in parallel
    mapfile -t parts < <(ls "${part_prefix}"*)
    pids=()
    for idx in "${!parts[@]}"; do
        # Skip empty file lists – no files assigned to this worker
        if [[ ! -s "${parts[$idx]}" ]]; then
            log "[rsync] Worker $((idx+1)) skipped: empty file list"
            continue
        fi

        local logfile
        logfile=$(TMPDIR="$RUN_TMPDIR" mktemp -t pgclone_rsync_"${module}"_"${idx}".XXXXXX)
        RSYNC_LOGFILES+=("$logfile")
        (
            local RSYNC_BIN
            RSYNC_BIN=$(command -v rsync)
            exec "$RSYNC_BIN" -a --relative --inplace \
                  --exclude 'pgsql_tmp*' \
                  --exclude 'pg_internal.init' \
                  --out-format="%l" --info=stats2 \
                  "${rsync_log_args[@]}" \
                  --files-from="${parts[$idx]}" \
                  --password-file="$RSYNC_SECRET_FILE" \
                  "rsync://replica@$PGHOST:$RSYNC_PORT/$module/" "$dst/" \
                  > >(awk -v p="$progress_pipe" -v l="$logfile" '{ if ($0 ~ /^[0-9]+$/) print > p; print >> l }') \
                  2>>"$logfile"
        ) &
        pids+=($!)
    done

    # ---------------- Wait for all rsync workers ------------------------------
    remaining=${#pids[@]}
    while (( remaining > 0 )); do
        if ! wait -n; then          # first worker with rc!=0
            fatal "rsync worker failed"  # cleanup will kill the rest workers
        fi
        ((remaining--))             # successful worker
    done

    # Close parent writer FD and wait for aggregator
    exec {PROG_FD}>&-
    if [[ -n "${AGGR_PID:-}" ]]; then
        if ! wait "$AGGR_PID"; then
            fatal "progress aggregator failed"
        fi
    fi

    # Aggregate and print rsync statistics
    aggregate_rsync_stats "${RSYNC_LOGFILES[@]}"

    # Cleanup temporary files
    for f in "${RSYNC_LOGFILES[@]}"; do rm -f "$f"; done
    rm -f "$file_raw" "$file_sorted" "${part_prefix}"*
    rmdir "$part_dir" 2>/dev/null || true

    # Clear the logfiles array for the next run
    RSYNC_LOGFILES=() 
}

### MAIN SCRIPT STARTS HERE ###

# ==== Parse arguments ====
print_usage () {
    cat <<EOF
Usage: pgclone [OPTIONS]

  --pghost             Primary host (required)
  --pgport             Primary port (default 5432)
  --pguser             Primary user (required)
  --primary-pgdata     Primary PGDATA path (required)
  --replica-pgdata     Replica PGDATA path (optional, default: same as --primary-pgdata)
  --replica-waldir     Replica pg_wal path (optional, default: <replica-pgdata>/pg_wal)
  --ssh-key            SSH private key file (optional, auto-detected if omitted)
  --ssh-user           SSH user (login on primary host) (required)
  --temp-waldir        Temporary WAL directory (optional, default: system tmp)
  --parallel           Number of parallel rsync jobs (optional, default: 4)
  --drop-existing      Remove existing data in replica pgdata and pg_wal before cloning (optional, default: disabled)
  --debug              Enable bash trace (set -x) for troubleshooting (optional, default: disabled)
  --keep-run-tmp       Preserve temporary run directory after completion (for debugging) (optional, default: disabled)
  --slot               Use a temporary physical replication slot (auto-named, disabled by default) (optional, default: disabled)
  --insecure-ssh       Disable known_hosts verification (equivalent to StrictHostKeyChecking=no) – NOT recommended (optional, default: disabled)
  --progress           Progress display mode: auto|bar|plain|none (optional, default: auto)
  --progress-interval  Seconds between plain progress updates (optional, default: 30)
  --verbose            Verbose output (optional, default: disabled)
  -v, --version        Print version and exit
  -h, --help           Show this help and exit
EOF
}

# Show help when called with no arguments
if [[ $# -eq 0 ]]; then
    print_usage
    exit 0
fi

show_help=0
show_version=0

# short options: h v V
# long  options are handled through the leading '-' case in getopts
while getopts ':hv-:' opt; do
    case "$opt" in
        -)  # long option: --foo or --foo=bar
            long="${OPTARG}"
            if [[ $long == *=* ]]; then
                val="${long#*=}"
                long="${long%%=*}"
                have_val=1
            else
                val=""
                have_val=0
            fi

            needs_arg=1
            case "$long" in
                verbose)   VERBOSE=1;               needs_arg=0 ;;
                help)      show_help=1;             needs_arg=0 ;;
                version)   show_version=1;          needs_arg=0 ;;
                pghost)           ;;
                pgport)           ;;
                pguser)           ;;
                primary-pgdata)   ;;
                replica-pgdata)   ;;
                replica-waldir)   ;;
                ssh-key)          ;;
                ssh-user)         ;;
                temp-waldir)      ;;
                parallel)         ;;
                drop-existing)    needs_arg=0 ;;
                debug)            needs_arg=0 ;;
                keep-run-tmp)     needs_arg=0 ;;
                slot)             needs_arg=0 ;;
                insecure-ssh)     needs_arg=0 ;;
                progress)
                    PROGRESS_MODE="$val" ;;
                progress-interval)
                    PROGRESS_INTERVAL="$val" ;;
                *) fatal "Unknown option --$long" ;;
            esac

            # if the option requires an argument, check if we have it
            if (( needs_arg && ! have_val )); then
                val="${!OPTIND-}"
                if [[ -z $val || $val == -* ]]; then
                    fatal "Option --$long requires a value"
                fi
                OPTIND=$((OPTIND+1))
            fi

            case "$long" in
                pghost)           PGHOST="$val" ;;
                pgport)           PGPORT="$val" ;;
                pguser)           PGUSER="$val" ;;
                primary-pgdata)   PRIMARY_PGDATA="$val" ;;
                replica-pgdata)   REPLICA_PGDATA="$val" ;;
                replica-waldir)   REPLICA_WALDIR="$val" ;;
                ssh-key)          SSH_KEY="$val" ;;
                ssh-user)         SSH_USER="$val" ;;
                temp-waldir)      TEMP_WALDIR="$val" ;;
                parallel)         PARALLEL="$val" ;;
                drop-existing)    DROP_EXISTING=1 ;;
                debug)            DEBUG=1 ;;
                keep-run-tmp)     KEEP_RUN_TMP=1 ;;
                slot)             USE_SLOT=1 ;;
                insecure-ssh)     INSECURE_SSH=1 ;;
                progress)        PROGRESS_MODE="$val" ;;
                progress-interval) PROGRESS_INTERVAL="$val" ;;
            esac
            ;;
        h) show_help=1    ;;
        v) show_version=1 ;;
        \?) fatal "Unknown option -$OPTARG" ;;
    esac
done
shift $((OPTIND-1))

if (( show_version )); then
    echo "pgclone version $PGCLONE_VERSION"
    exit 0
fi
if (( show_help )); then
    print_usage
    exit 0
fi

# Logging script version
log "pgclone script version $PGCLONE_VERSION"

# Enable bash tracing if requested
if [[ "$DEBUG" == "1" ]]; then
    set -x
    log "Debug tracing enabled (--debug)"
fi

# ==== Global run temp directory ====
# All per-run temporary files/subdirs are created under this directory to simplify cleanup.
RUN_TMPDIR=$(mktemp -d -t pgclone_.XXXXXX)
log "Using run temp directory $RUN_TMPDIR"
PIDFILE="$RUN_TMPDIR/pgclone.pid"
PGCLONE_MAIN_PID="$$"
echo $PGCLONE_MAIN_PID > "$PIDFILE"


# ==== Validate ====
: "${PGHOST:?--pghost required}"
: "${PGUSER:?--pguser required}"
: "${PRIMARY_PGDATA:?--primary-pgdata required}"

# Default replica PGDATA to primary if not supplied
if [[ -z "${REPLICA_PGDATA:-}" ]]; then
    REPLICA_PGDATA="$PRIMARY_PGDATA"
    log "--replica-pgdata not specified, using the same path as --primary-pgdata: $REPLICA_PGDATA"
fi

# Provide default SSH key if none specified
if [[ -z "${SSH_KEY:-}" ]]; then
    for default_key in "$HOME/.ssh/id_rsa" "$HOME/.ssh/id_ecdsa" "$HOME/.ssh/id_ecdsa_sk" "$HOME/.ssh/id_ed25519" "$HOME/.ssh/id_ed25519_sk"; do
        if [[ -r "$default_key" ]]; then
            SSH_KEY="$default_key"
            log "Using default SSH key $SSH_KEY"
            break
        fi
    done
    if [[ -z "${SSH_KEY:-}" ]]; then
        log "No SSH key specified or auto-detected; relying on SSH agent and default ssh configuration"
    fi
fi
: "${SSH_USER:?--ssh-user required}"

# --- Authentication check ---------------------------------------------
# Accept either explicit PGPASSWORD or a readable ~/.pgpass file.
# If both are present, the env-var wins (standard libpq precedence).
# -----------------------------------------------------------------------
if [[ -z "${PGPASSWORD:-}" ]]; then
    if [[ -r "$HOME/.pgpass" ]]; then
        log "Using password from ~/.pgpass"
    else
        fatal "Authentication required: set PGPASSWORD or create readable ~/.pgpass"
    fi
else
    export PGPASSWORD          # make it visible to subprocesses
    log "Using password from PGPASSWORD env variable (overrides ~/.pgpass)"
fi

[[ "$PGPORT"    =~ ^[0-9]+$ ]] || fatal "Invalid port"
[[ "$PARALLEL"  =~ ^[0-9]+$ ]] || fatal "Invalid parallel"

TEMP_WALDIR="${TEMP_WALDIR:-$(TMPDIR="$RUN_TMPDIR" mktemp -d -t pgclone_temp.XXXXXX)}"
REPLICA_WALDIR="${REPLICA_WALDIR:-$REPLICA_PGDATA/pg_wal}"

if [[ -n "${SSH_KEY:-}" ]]; then
    validate_ssh_key "$SSH_KEY"
fi

# Remove existing replica directories when --drop-existing is specified
if [[ "$DROP_EXISTING" == "1" ]]; then
    log "--drop-existing: removing existing data in $REPLICA_PGDATA and $REPLICA_WALDIR ..."
    rm -rf "$REPLICA_PGDATA" "$REPLICA_WALDIR" || fatal "Failed to remove old replica directories"
fi

# Ensure replica directories exist after potential removal
mkdir -p "$REPLICA_PGDATA" "$REPLICA_WALDIR" "$TEMP_WALDIR"

# Build SSH options depending on security mode
SSH_OPTS=("-o" "BatchMode=yes")
if [[ "$INSECURE_SSH" == "1" ]]; then
    SSH_OPTS+=("-o" "StrictHostKeyChecking=no")
else
    SSH_OPTS+=("-o" "StrictHostKeyChecking=yes")
fi
if [[ -n "${SSH_KEY:-}" ]]; then
    SSH_OPTS+=("-i" "$SSH_KEY")
fi

# ==== Check that we are not running as root ====
if [[ "$(id -u)" -eq 0 ]]; then
  fatal "This script must not be run as root"
fi

# ==== Check tools ====
for t in ssh psql pg_ctl pg_receivewal rsync find du split awk sha256sum od ps pgrep; do
    command -v "$t" >/dev/null || fatal "$t not found"
done

# ==== Protect against concurrent runs of pgclone for the same replica data directory. ====
# The lock is automatically released when the script exits.
REPLICA_PGDATA_ABS=$(readlink -f "$REPLICA_PGDATA")
LOCK_FILE="/tmp/pgclone_$(echo -n "$REPLICA_PGDATA_ABS" | sha256sum | cut -d' ' -f1).lock"
exec 200>"$LOCK_FILE"
flock -n 200 || fatal "Another pgclone is running for $REPLICA_PGDATA_ABS (lock: $LOCK_FILE)"

# ==== Check that Postgres is NOT running on target replica PGDATA ====
# More robust: even if pg_ctl cannot access the directory (perm issues) we check the pid exists and matches postgres
PIDFILE="$REPLICA_PGDATA/postmaster.pid"
if [[ -f "$PIDFILE" ]]; then
    pid=$(head -n1 "$PIDFILE" | tr -d '[:space:]')
    if [[ "$pid" =~ ^[0-9]+$ ]]; then
        if kill -0 "$pid" 2>/dev/null; then
            fatal "Seems like PostgreSQL instance already running or stale postmaster.pid has found (PID $pid) in $REPLICA_PGDATA."
        fi
    fi
fi

# ==== Check SSH connection ====
ssh_exec "echo OK" >/dev/null ||
    fatal "SSH test failed"

# ==== Disk space check ====
declare -A fs_need_kb=()  # mount_point -> required_kilobytes

# pgdata
primary_size_mb=$(estimate_primary_size_mb)
fs_pgdata=$(df -P "$REPLICA_PGDATA" | awk 'NR==2{print $6}')
fs_need_kb[$fs_pgdata]=$(( ${fs_need_kb[$fs_pgdata]:-0} + primary_size_mb*1024 ))

# tablespaces
discover_tablespaces
for oid in "${!TBLSPCS[@]}"; do
    dst=${TBLSPCS_DST[$oid]}
    mkdir -p "$dst"
    mp=$(df -P "$dst" | awk 'NR==2{print $6}')
    fs_need_kb[$mp]=$(( ${fs_need_kb[$mp]:-0} + ${TBLSPCS_SIZE_KB[$oid]} ))
done

# check space on replica
check_space fs_need_kb

# ==== Open persistent psql session ====
log "Open persistent psql session..."
tmp_psql_dir=$(TMPDIR="$RUN_TMPDIR" mktemp -d -t pgclone_psql_fifo.XXXXXX)
PSQL_IN="$tmp_psql_dir/in"
PSQL_OUT="$tmp_psql_dir/out"
mkfifo "$PSQL_IN" "$PSQL_OUT"

psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" \
    -w -X -A -t -v ON_ERROR_STOP=1 <"$PSQL_IN" >"$PSQL_OUT" &
PSQL_PID=$!
exec 3>"$PSQL_IN"
psql_send() { echo "$1" >&3; }
psql_wait() { grep -m 1 . <"$PSQL_OUT"; }

# Watchdog: terminate main script if psql session exits,
#           terminate psql if main script dies.
(
    child_pid=$PSQL_PID
    main_pid=$PGCLONE_MAIN_PID
    while kill -0 "$child_pid" 2>/dev/null && kill -0 "$main_pid" 2>/dev/null; do
        sleep 1
    done
    if ! kill -0 "$main_pid" 2>/dev/null; then
        log "[psql_watchdog] Main process $main_pid died -> terminating psql PID=$child_pid"
        watchdog_terminate "$child_pid" "psql"
        exit 0
    fi
    log "[psql_watchdog] psql session PID=$child_pid exited"
    log "[psql_watchdog] Terminating main process $main_pid"
    kill -TERM "$main_pid" 2>/dev/null
) &
PSQL_WATCHDOG_PID=$!

# ==== PostgreSQL version ====
psql_send "SHOW server_version_num;"
ver=$(psql_wait | tr -d '[:space:]')
[[ -z "$ver" ]] && fatal "Could not retrieve PostgreSQL version"
[[ "$ver" -ge 150000 ]] || fatal "PostgreSQL >= 15 required"

# ==== Start pg_receivewal  ====
PG_RCV_APPNAME="pgclone-$$"      # unique application_name for this run

# Configure replication slot if requested
if [[ "$USE_SLOT" == "1" ]]; then
    SLOT_NAME="pgclone_$$"
    # Create the slot via pg_receivewal utility (doc: it exits immediately after creating)
    log "Creating replication slot $SLOT_NAME via pg_receivewal..."
    pg_receivewal \
        --host="$PGHOST" --port="$PGPORT" --username="$PGUSER" \
        --no-password --create-slot --if-not-exists --slot="$SLOT_NAME" >/dev/null 2>&1

    pg_rwal_slot_args=(--slot="$SLOT_NAME")
    log "Starting pg_receivewal (appname=$PG_RCV_APPNAME, slot=$SLOT_NAME)..."
else
    pg_rwal_slot_args=()
    log "Starting pg_receivewal (appname=$PG_RCV_APPNAME, no slot)..."
fi

# Build additional arguments for pg_receivewal
pg_rwal_args=()
[[ "$VERBOSE" == "1" ]] && pg_rwal_args+=(--verbose)

find "$TEMP_WALDIR" -mindepth 1 -delete
PGAPPNAME="$PG_RCV_APPNAME" pg_receivewal \
    --host="$PGHOST" --port="$PGPORT" --username="$PGUSER" \
    --no-password --directory="$TEMP_WALDIR" \
    "${pg_rwal_slot_args[@]}" \
    "${pg_rwal_args[@]}" >"$TEMP_WALDIR/pg_receivewal.log" 2>&1 &
PG_RECEIVEWAL_PID=$!
sleep 3
if ! kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null; then
    [ -f "$TEMP_WALDIR/pg_receivewal.log" ] && log "$(cat "$TEMP_WALDIR"/pg_receivewal.log)"
    fatal "pg_receivewal failed"
fi

# ==== Watchdog for pg_receivewal ====
(
    child_pid=$PG_RECEIVEWAL_PID
    main_pid=$PGCLONE_MAIN_PID
    while kill -0 "$child_pid" 2>/dev/null && kill -0 "$main_pid" 2>/dev/null; do
        sleep 1
    done
    if ! kill -0 "$main_pid" 2>/dev/null; then
        log "[pg_receivewal_watchdog] Main process $main_pid died -> terminating pg_receivewal PID=$child_pid"
        watchdog_terminate "$child_pid" "pg_receivewal"
        exit 0
    fi
    log "[pg_receivewal_watchdog] pg_receivewal PID=$child_pid exited"
    log "[pg_receivewal_watchdog] Terminating main process $main_pid"
    kill -TERM "$main_pid" 2>/dev/null
) &
PG_RECEIVEWAL_WATCHDOG_PID=$!

wait_for_replication_start "$PG_RCV_APPNAME"

# Start rsyncd on the primary host via SSH
log "Setting up rsyncd on master..."

# Generate a 16-char hex secret using od (safe under set -euo pipefail)
RSYNC_SECRET=$(od -An -N8 -tx1 /dev/urandom | tr -d ' \n')
RSYNC_SECRET_FILE=$(TMPDIR="$RUN_TMPDIR" mktemp -t pgclone_secr.XXXXXX)
echo "$RSYNC_SECRET" > "$RSYNC_SECRET_FILE"
chmod 600 "$RSYNC_SECRET_FILE"

random_hash=$(head -c 20 /dev/urandom | sha256sum | cut -c1-8)
RSYNCD_TAG="pgclone_${random_hash}"  # tag for rsyncd remote directory

REMOTE_DIR="/tmp/${RSYNCD_TAG}"
REMOTE_CONF="$REMOTE_DIR/rsyncd.conf"
REMOTE_SECR="$REMOTE_DIR/rsyncd.secrets"
REMOTE_PID="$REMOTE_DIR/rsyncd.pid"
REMOTE_PORT="$REMOTE_DIR/rsyncd.port"


tbl_cnt=${#TBLSPCS[@]}            # 0, if array is empty
max_conn=$(( PARALLEL * (tbl_cnt + 2) ))

RSYNCD_CONF=$(cat <<EOF
use chroot = no
max connections = $max_conn
pid file = $REMOTE_PID
log file = $REMOTE_DIR/rsyncd.log
lock file = $REMOTE_DIR/rsyncd.lock

[pgdata]
    path = $PRIMARY_PGDATA
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR

[base]
    path = $PRIMARY_PGDATA/base
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR
EOF
)

# add sections for tablespaces (if any)
for oid in "${!TBLSPCS[@]}"; do
    RSYNCD_CONF+="
[spc_$oid]
    path = ${TBLSPCS[$oid]}
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR

"
    log "Added tablespace OID=$oid to rsyncd config"
done

ssh_exec "mkdir -p $(shquote "$REMOTE_DIR")"
ssh_exec "cat > $(shquote "$REMOTE_CONF")" <<<"$RSYNCD_CONF"
ssh_exec "echo 'replica:$RSYNC_SECRET' > $(shquote "$REMOTE_SECR") && chmod 600 $(shquote "$REMOTE_SECR")"

log "Starting rsyncd daemon on master via SSH..."

# Build remote command with safe shell quoting for each variable to prevent injection
remote_cmd=$(printf 'RSYNCD_PORT_RANGE=%q TARGET_HOST=%q REMOTE_DIR=%q REMOTE_CONF=%q REMOTE_PORT=%q bash -s' \
            "$RSYNCD_PORT_RANGE" "$PGHOST" "$REMOTE_DIR" "$REMOTE_CONF" "$REMOTE_PORT")


ssh -tt "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "$remote_cmd" <<'REMOTE_RS' >/dev/null 2>&1 &
set -euo pipefail

cleanup() {
    [[ -n "${rsyncd_pid:-}" ]] && kill -9 "$rsyncd_pid" 2>/dev/null || true
    [[ -n "${rsyncd_pid:-}" ]] && wait "$rsyncd_pid" 2>/dev/null || true
    rm -rf $REMOTE_DIR
}
trap cleanup EXIT INT TERM

# --- get UP for --pghost ---
if [[ "$TARGET_HOST" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    BIND_IP="$TARGET_HOST"
else
    BIND_IP=$(getent ahosts "$TARGET_HOST" | awk 'NR==1{print $1}')
fi

# --- select available TCP port from RSYNCD_PORT_RANGE ---
pmin="${RSYNCD_PORT_RANGE%%..*}"
pmax="${RSYNCD_PORT_RANGE##*..}"
RSYNC_PORT=""
for ((p=pmin; p<=pmax; p++)); do
    (echo >/dev/tcp/$BIND_IP/$p) >/dev/null 2>&1 && continue   # occupied on this IP
    RSYNC_PORT=$p; break                                       # available
done
[[ -z "$RSYNC_PORT" ]] && { echo "no free port"; exit 1; }
echo "$RSYNC_PORT" > "$REMOTE_PORT"

rsync --daemon --no-detach --config=$REMOTE_CONF --port=$RSYNC_PORT &
rsyncd_pid=$!
wait
REMOTE_RS
RSYNCD_SSH_PID=$!

# Watchdog: if main process dies, kill ssh (which stops rsyncd)
(
    main_pid=$PPID
    while kill -0 "$main_pid" 2>/dev/null; do
        sleep 1
    done
    log "[rsyncd_watchdog] Main process $main_pid died -> terminating rsyncd-ssh PID=$RSYNCD_SSH_PID"
    watchdog_terminate "$RSYNCD_SSH_PID" "rsyncd ssh session"
) &
RSYNCD_WATCHDOG_PID=$!

# Get rsyncd port from remote
timeout_sec=$RSYNCD_GET_PORT_TIMEOUT
t_start=$(date +%s)
# shellcheck disable=SC2029
while true; do
    RSYNC_PORT=$(ssh_exec "cat '$REMOTE_PORT' 2>/dev/null" || true)
    [[ -n "$RSYNC_PORT" ]] && break
    (( $(date +%s) - t_start >= timeout_sec )) && fatal "Failed to retrieve rsyncd port within ${timeout_sec}s"
    sleep 1
done

[[ -z "$RSYNC_PORT" ]] && fatal "Failed to retrieve rsyncd port"
log "Using rsync port $RSYNC_PORT"

# TEST_stop_point_1
# This is a test stop point for the 05-aborts.bats test.
# It is used to verify that the script can be suspended correctly during the test.
# Used in tests/05-aborts.bats

# ==== Run pg_backup_start ====
log "Running pg_backup_start on primary..."
psql_send "SELECT * FROM pg_backup_start('pgclone', true);"
START_LSN=$(psql_wait | awk -F '|' '{print $1}' | tr -d '[:space:]')
validate_lsn_format "$START_LSN"
log "Backup start LSN: $START_LSN"

# ======== Configuring and starting rsync =============
# Setup rsync log arguments
rsync_log_args=()
[[ "$VERBOSE" == "1" ]] && rsync_log_args+=(--stats --human-readable)

# ==== Initial rsync of all PGDATA except pg_wal and base, transient and temp files ====
log "Initial rsync of PGDATA (excluding base, pg_wal, transient and temp files)..."
logfile=$(TMPDIR="$RUN_TMPDIR" mktemp -t pgclone_rsync_initial.XXXXXX)
rsync -a --delete \
    --exclude 'pg_wal/' \
    --exclude 'base/' \
    --exclude 'postmaster.pid' \
    --exclude 'postmaster.opts' \
    --exclude 'pg_replslot/' \
    --exclude 'pg_dynshmem/' \
    --exclude 'pg_notify/' \
    --exclude 'pg_serial/' \
    --exclude 'pg_snapshots/' \
    --exclude 'pg_stat_tmp/' \
    --exclude 'pg_subtrans/' \
    --exclude 'pgsql_tmp*' \
    --exclude 'pg_internal.init' \
    "${rsync_log_args[@]}" \
    --password-file="$RSYNC_SECRET_FILE" \
    "rsync://replica@$PGHOST:$RSYNC_PORT/pgdata/" "$REPLICA_PGDATA/" \
    >"$logfile" 2>&1

# Ensure empty base directory exist
mkdir -p "$REPLICA_PGDATA/base"

log "Parallel rsync of base directory..."
parallel_rsync_module "base" "$REPLICA_PGDATA/base"
log "Base synced"

log "Parallel rsync of tablespaces..."
for oid in "${!TBLSPCS[@]}"; do
    log "Syncing tablespace OID=$oid (${TBLSPCS[$oid]})..."
    parallel_rsync_module "spc_$oid" "${TBLSPCS_DST[$oid]}"
done
log "Tablespaces synced"

rm -f "$RSYNC_SECRET_FILE"

# Create empty subdirs for excluded runtime directories
for d in pg_replslot pg_dynshmem pg_notify pg_serial pg_snapshots pg_stat_tmp pg_subtrans; do
    mkdir -p "$REPLICA_PGDATA/$d"
done

# Ensure empty pg_wal directory exists as a pgdata subdir
if [[ "${REPLICA_WALDIR%/}" != "${REPLICA_PGDATA%/}/pg_wal" ]]; then
    # If pg_wal is a separate directory, create a symlink in the pgdata directory
    ln -s -f "$REPLICA_WALDIR" "$REPLICA_PGDATA/pg_wal"
else
    # If pg_wal is the subdir of pgdata, we need to ensure it exists
    mkdir -p "$REPLICA_PGDATA/pg_wal"
fi

log "Parallel rsync done"

# ==== Run pg_backup_stop ====
log "Stopping backup..."
psql_send "
SELECT lsn,
       translate(encode(labelfile::bytea,  'base64'), E'\n', '') AS lab_b64,
       translate(encode(spcmapfile::bytea, 'base64'), E'\n', '') AS map_b64
FROM   pg_backup_stop(true);
"

IFS='|' read -r STOP_LSN BLABEL_B64 SPCMAP_B64 < <(psql_wait || fatal "pg_backup_stop failed")

printf '%s' "$BLABEL_B64" | base64 --decode > "$REPLICA_PGDATA/backup_label"
[[ -n $SPCMAP_B64 ]] && printf '%s' "$SPCMAP_B64" | base64 --decode > "$REPLICA_PGDATA/tablespace_map"

# Copy fresh pg_control produced by pg_backup_stop()
# shellcheck disable=SC2029
ssh_exec "cat $(shquote "$PRIMARY_PGDATA")/global/pg_control" \
    > "$REPLICA_PGDATA/global/pg_control"

log "Backup stopped at LSN $STOP_LSN and control files written"

log "Closing persistent psql session..."
# Terminate psql watchdog first, because it may be waiting for psql session to exit.
kill -TERM "$PSQL_WATCHDOG_PID" 2>/dev/null || true
wait_and_kill_process "$PSQL_WATCHDOG_PID" "psql watchdog"
PSQL_WATCHDOG_PID=""
# Then terminate psql session
psql_send '\q'
wait_and_kill_process "$PSQL_PID" "persistent psql session"

# We must be certain the WAL segment that contains STOP_LSN is present on the replica
# *before* we stop pg_receivewal.  Otherwise the standby will ask for that segment
# during recovery and may fail with:
#   "requested WAL segment ... has already been removed"
# because the primary could recycle it while the replica never downloaded it.
# Therefore we determine the exact filename
# for STOP_LSN and wait until that file shows up in TEMP_WALDIR.

STOP_WALFILE=$(
  psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -w -X -A -t \
    -c "SELECT pg_walfile_name('$STOP_LSN');" | tr -d '[:space:]'
)
log "Waiting for WAL file $STOP_WALFILE..."

t0=$(date +%s)
timeout=$WAL_WAIT_TIMEOUT
while [[ ! -f "$TEMP_WALDIR/$STOP_WALFILE" ]]; do
    (( $(date +%s) - t0 > timeout )) && fatal "WAL $STOP_WALFILE not received in $timeout s"
    sleep 1
done
log "WAL $STOP_WALFILE received"

# ==== Stop pg_receivewal ====
# We should stop pg_receivewal explicitly here, because we need stable files in TEMP_WALDIR
# before we move them to the final WAL directory.
log "Stopping pg_receivewal..."
if kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null; then
    # Terminate pg_receivewal watchdog first, because it may be waiting for pg_receivewal to exit.
    kill -TERM "$PG_RECEIVEWAL_WATCHDOG_PID" 2>/dev/null
    wait_and_kill_process "$PG_RECEIVEWAL_WATCHDOG_PID" "pg_receivewal watchdog"
    # Then terminate pg_receivewal
    kill -TERM "$PG_RECEIVEWAL_PID" 2>/dev/null
    wait_and_kill_process "$PG_RECEIVEWAL_PID" "pg_receivewal"
fi
# We stops pg_receivewal and its watchdog here, so we should not do it on cleanup.
PG_RECEIVEWAL_PID=""
PG_RECEIVEWAL_WATCHDOG_PID=""

# ==== Move WAL files ====
log "Moving WAL to $REPLICA_WALDIR..."
find "$TEMP_WALDIR" -type f -exec mv -f {} "$REPLICA_WALDIR/" \;
find "$TEMP_WALDIR" -mindepth 1 -delete

# Find the lexicographically last *.partial in REPLICA_WALDIR and remove the .partial suffix.
# This is needed to handle the case when pg_receivewal was interrupted
# while writing a WAL segment, leaving a file with .partial suffix.
last_partial=$(find "$REPLICA_WALDIR" -maxdepth 1 -type f -name '*.partial' \
                   -printf '%P\n' | sort | tail -n1)

if [[ -n "$last_partial" ]]; then
    mv -f "$REPLICA_WALDIR/$last_partial" \
          "$REPLICA_WALDIR/${last_partial%.partial}"
    log "Partial WAL segment renamed: $last_partial -> ${last_partial%.partial}"
fi

# ==== Final checks ====
for f in PG_VERSION postgresql.conf pg_hba.conf; do
    [[ -f "$REPLICA_PGDATA/$f" ]] || fatal "Missing file: $f"
done
wal_count=$(find "$REPLICA_WALDIR" -type f -name '[0-9A-F]*' | wc -l)
[[ "$wal_count" -gt 0 ]] || fatal "No WAL files in $REPLICA_WALDIR, see pg_walreceiver log $REPLICA_WALDIR/pg_receivewal.log"
rm -f "$REPLICA_WALDIR/pg_receivewal.log"
log "Found $wal_count WAL files in $REPLICA_WALDIR"

chmod 700 "$REPLICA_PGDATA" "$REPLICA_WALDIR" || log "chmod failed"

log "Replica prepared. Don't forget:"
log "  1. Create standby.signal in $REPLICA_PGDATA"
log "  2. Configure postgresql.conf with primary_conninfo"
log "  3. Start PostgreSQL"

exit 0
