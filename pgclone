#!/usr/bin/env bash
# pgclone: prepares a PostgreSQL physical replica by syncing from primary
# REQUIREMENT: Only supports physical replication, PostgreSQL 15+
# NOTE: Replication slot is NOT used for pg_receivewal

set -euo pipefail

PGCLONE_VERSION="0.3.2"

# ==== Default parameters ====
PGPORT=5432                 # TCP port of the primary Postgres instance (default 5432)
REPLICA_WALDIR=""           # Destination pg_wal directory on the replica;
                            # empty ⇒ use "$REPLICA_PGDATA/pg_wal"
TEMP_WALDIR=""              # Temporary directory where pg_receivewal stores incoming WAL;
                            # empty ⇒ auto-create under /tmp
PARALLEL=4                  # Number of simultaneous rsync workers for base/tablespace copy
VERBOSE=0                   # 1 = print detailed progress/debug logs, 0 = quiet

RSYNCD_PORT_RANGE="45000..45100"   # Port range to search for a free TCP port when
                                   # starting the transient rsync daemon on the primary

# ---- timeouts (seconds) ----
RSYNCD_GET_PORT_TIMEOUT=30   # Max time to wait for the primary to report the chosen rsyncd port
REPLICATION_START_TIMEOUT=60 # Wait for pg_receivewal to appear in pg_stat_replication
PROCESS_TERM_TIMEOUT=60      # Grace period after SIGTERM before a child process is force-killed
WAL_WAIT_TIMEOUT=60          # How long to wait for the WAL segment containing STOP_LSN to arrive

declare -A TBLSPCS=()          # oid -> src (master)
declare -A TBLSPCS_SIZE_KB=()  # oid -> size KB
declare -A TBLSPCS_DST=()      # oid -> dst (replica)

# ==== Global state ====
PG_RECEIVEWAL_PID=""
PG_RECEIVEWAL_WATCHDOG_PID=""
CLEANUP_DONE=0
RSYNC_SECRET=""
RSYNCD_SSH_PID=""
RSYNCD_WATCHDOG_PID=""
PART_PREFIX=""
FILELIST_RAW=""
FILELIST_SORTED=""
RSYNC_LOGFILES=()

# ==== Logging ====
log() { [[ "$VERBOSE" == "1" ]] && echo "[$(date '+%F %T')] [pgclone] $*" >&2; return 0; }
err() { echo "[$(date '+%F %T')] FATAL: $*" >&2; }
fatal() { err "$@"; exit 1; }

# ==== Cleanup ====
# shellcheck disable=SC2317
cleanup() {
    rc=$?
    [[ "$CLEANUP_DONE" == "1" ]] && exit "$rc"
    CLEANUP_DONE=1
    log "Running cleanup (rc=$rc)..."

    # Stop pg_receivewal
    if [[ -n "${PG_RECEIVEWAL_PID:-}" ]]; then
        log "Killing pg_receivewal PID=$PG_RECEIVEWAL_PID"
        kill "$PG_RECEIVEWAL_PID" 2>/dev/null || true
        wait_and_kill_process "$PG_RECEIVEWAL_PID" "pg_receivewal"
    fi

    # Stop pg_receivewal watchdog
    if [[ -n "${PG_RECEIVEWAL_WATCHDOG_PID:-}" ]]; then
        kill "$PG_RECEIVEWAL_WATCHDOG_PID" 2>/dev/null || true
        wait_and_kill_process "$PG_RECEIVEWAL_WATCHDOG_PID" "pg_receivewal watchdog"
    fi

    # Stop rsyncd on master via ssh PID
    if [[ -n "${RSYNCD_SSH_PID:-}" ]]; then
        log "Stopping rsyncd (via SSH PID=$RSYNCD_SSH_PID)..."
        kill "$RSYNCD_SSH_PID" 2>/dev/null || true
        wait_and_kill_process "$RSYNCD_SSH_PID" "rsyncd ssh session"
    fi

    # Stop rsyncd watchdog
    if [[ -n "${RSYNCD_WATCHDOG_PID:-}" ]]; then
        kill "$RSYNCD_WATCHDOG_PID" 2>/dev/null || true
        wait_and_kill_process "$RSYNCD_WATCHDOG_PID" "rsyncd watchdog"
    fi

    # Cleanup temp files created for --files-from
    [[ -n "${FILELIST_RAW:-}" && -f "$FILELIST_RAW"    ]] && rm -f "$FILELIST_RAW"
    [[ -n "${FILELIST_SORTED:-}" && -f "$FILELIST_SORTED"    ]] && rm -f "$FILELIST_SORTED"
    [[ -n "${PART_PREFIX:-}" ]] && { rm -f "${PART_PREFIX}"* 2>/dev/null || true; }

    # Cleanup rsync worker logfiles
    for f in "${RSYNC_LOGFILES[@]}"; do
        [[ -f "$f" ]] && rm -f "$f"
    done

    # Removing temp WAL dir content
    if [[ -d "${TEMP_WALDIR:-}" && "$TEMP_WALDIR" == /tmp/pgclone_temp.* ]]; then
        log "Removing temp WAL dir $TEMP_WALDIR content..."
        find "$TEMP_WALDIR" -mindepth 1 -delete
    fi

    # Cleanup lock if exists
    if [[ -n "${LOCK_FILE:-}" && -f "$LOCK_FILE" ]]; then
        # Delete the lock file only if we still hold its file descriptor 
        # (i.e., the file descriptor is still open).
        if flock -n 200; then
            rm -f "$LOCK_FILE"
        fi
    fi

    exit "$rc"
}
trap cleanup EXIT INT TERM

# ==== Helpers ====

# Safe shell quoting for remote commands
shquote() {
    # printf %q даёт POSIX-совместимую экранированную строку
    printf '%q' "$1"
}

wait_and_kill_process() {
    process_pid="$1"
    process_name="$2"
    t0=$(date +%s)
    while kill -0 "$process_pid" 2>/dev/null; do
        (( $(date +%s) - t0 > PROCESS_TERM_TIMEOUT )) && {
            log "$process_name did not exit in $PROCESS_TERM_TIMEOUT seconds, trying to kill it..."
            kill -9 "$process_pid" 2>/dev/null || true
            break
        }
        sleep 1
    done
    # Final wait to reap the process, if it's our child
    wait "$process_pid" 2>/dev/null || true
}

watchdog_terminate () {
    local pid="$1"           # PID of the process to terminate
    local name="$2"          # Human-readable name for logging

    local t0

    # If PID is empty or the process is already gone — nothing to do
    [[ -z "$pid" || ! "$pid" =~ ^[0-9]+$ ]] && return 0
    kill -0 "$pid" 2>/dev/null || return 0

    # Attempt a graceful shutdown
    kill -TERM "$pid" 2>/dev/null || return 0
 
    t0=$(date +%s)
    while kill -0 "$pid" 2>/dev/null; do
        (( $(date +%s) - t0 >= PROCESS_TERM_TIMEOUT )) && {
            log "[watchdog] $name (PID=$pid) did not exit within ${PROCESS_TERM_TIMEOUT}s — sending SIGKILL"
            kill -KILL "$pid" 2>/dev/null || true
            break
        }
        sleep 1
    done

    # Reap the child to avoid a zombie, if it really is our child
    wait "$pid" 2>/dev/null || true
}

validate_lsn_format() {
    [[ "$1" =~ ^[0-9A-F]+/[0-9A-F]+$ ]] || fatal "Invalid LSN format: $1"
}

validate_ssh_key() {
    local key="$1"
    [[ -f "$key" && -r "$key" ]] || fatal "SSH key missing or unreadable: $key"
}

estimate_primary_size_mb() {
    log "Estimating primary data size..."
    local kb
    # shell-quote PGDATA before passing to the remote shell
    # shellcheck disable=SC2029
    kb=$(ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" \
             "du -sk $(shquote "$PRIMARY_PGDATA")" |
         awk '{print $1}')
    [[ "$kb" =~ ^[0-9]+$ ]] || fatal "du failed on primary"
    echo $((kb / 1024))
}

# ---------------------------------------------------------------
# check_space <assoc-array-name>
#   <assoc-array-name>[mount_point] = required_kilobytes
# ---------------------------------------------------------------
# shellcheck disable=SC2004
check_space () {
    local -n need_kb=$1          # bash nameref (>=4.3)

    for mp in "${!need_kb[@]}"; do
        local avail_kb
        avail_kb=$(df -P "$mp" | awk 'NR==2{print $4}')

        if (( avail_kb < need_kb[$mp] )); then            # <-- $mp
            fatal "Insufficient disk space on $mp: $((avail_kb/1024)) MB "\
                  "< $((need_kb[$mp]/1024)) MB required"  # <-- $mp
        fi
        log "Disk OK on $mp: $((avail_kb/1024)) MB free "\
            "(need $((need_kb[$mp]/1024)) MB)"            # <-- $mp
    done
}

# shellcheck disable=SC2029
discover_tablespaces() {
    local pgdata_q
    pgdata_q=$(shquote "$PRIMARY_PGDATA")

    while IFS='|' read -r oid src size; do
        [[ -z $oid || -z $src ]] && continue
        TBLSPCS[$oid]="$src"
        TBLSPCS_SIZE_KB[$oid]="$size"
        TBLSPCS_DST[$oid]="$src"
        log "Discovered tablespace: OID=$oid, src=$src, size=${size}KB"
    done < <(
        ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" \
            "for l in ${pgdata_q}/pg_tblspc/*; do
                 [ -L \"\$l\" ] || continue
                 oid=\$(basename \"\$l\")
                 tgt=\$(readlink -f \"\$l\")
                 sz=\$(du -sk \"\$tgt\" | awk '{print \$1}')
                 echo \"\$oid|\$tgt|\$sz\"
             done"
    )
}

# Wait until the walreceiver connection shows up in pg_stat_replication
wait_for_replication_start() {
    local appname t0 timeout
    appname="$1" 
    timeout=$REPLICATION_START_TIMEOUT
    t0=$(date +%s)
    log "Waiting for WAL stream to appear in pg_stat_replication (timeout=${timeout}s)..."
    while (( $(date +%s) - t0 < timeout )); do
        # Ensure pg_receivewal is still alive
        kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null \
            || fatal "pg_receivewal exited"

        # Check pg_stat_replication for our application_name
        psql_send "SELECT 1 FROM pg_stat_replication WHERE application_name='$appname' LIMIT 1;"
        if [[ $(psql_wait | tr -d '[:space:]') == "1" ]]; then
            log "WAL streaming is active, continuing..."
            return 0
        fi
        sleep 1
    done
    fatal "Timeout ${timeout}s: WAL streaming did not start"
}

# $1 = rsync-module, $2 = dst
parallel_rsync_module() {
    local module="$1" dst="$2"
    local part_prefix file_raw file_sorted

    # preparing list of files to copy
    part_prefix=$(mktemp -u -t pgclone_part_"${module}".XXXX)
    file_raw=$(mktemp -t pgclone_raw_"${module}".XXXX)
    file_sorted=$(mktemp -t pgclone_sorted_"${module}".XXXX)
    for ((i=0;i<PARALLEL;i++)); do :>"${part_prefix}_$i"; done

    rsync --list-only --recursive \
          --password-file="$RSYNC_SECRET_FILE" \
          "rsync://replica@$PGHOST:$RSYNC_PORT/$module/" |
          awk '$1 ~ /^-/ {gsub(/,/, "", $2); print $2 "\t" $5}' > "$file_raw"
    sort -nr "$file_raw" > "$file_sorted"

    # --- Distribute files across workers (ring-hop heuristic) --------------------
    #  1. `file_sorted` contains every file in the module, sorted by size (largest first).
    #  2. `chunksize[i]` keeps current total size assigned to worker *i*.
    #  3. We advance a cursor `cur` over the worker indexes in a “ring”:
    #      cur, cur+1, cur+2 … (mod PARALLEL).
    #    Before appending the next file we look one step ahead (`nxt`) —
    #    if the next worker currently has a smaller cumulative size than
    #    the current one, we hop to it (`cur = nxt`). This simple rule
    #    evens the load without full bin-packing.
    #  4. The selected worker’s file list is written to `${part_prefix}_$cur`
    #    and its `chunksize` is updated.
    #
    #  After the loop we recreate the directory tree locally:
    #   `file_raw` still has “size<TAB>path” pairs. We strip the path,
    #   take parent directories, deduplicate and `mkdir -p` each of them
    #   under the destination.  This ensures every sub-directory exists
    #   before rsync starts with `--relative`.
    # -----------------------------------------------------------------------------

    declare -a chunksize; for ((i=0;i<PARALLEL;i++)); do chunksize[i]=0; done
    cur=0
    while IFS=$'\t' read -r sz path; do
        nxt=$(( (cur+1)%PARALLEL ))
        (( chunksize[nxt] < chunksize[cur] )) && cur=$nxt
        echo "$path" >> "${part_prefix}_$cur"
        chunksize[cur]=$(( chunksize[cur]+sz ))
    done < "$file_sorted"

    awk -F'\t' '{print $2}' "$file_raw" | awk -F/ 'NF>1{NF--;print}' OFS=/ | sort -u |
        while read -r d; do mkdir -p "$dst/$d"; done

    # run rsync workers in parallel
    mapfile -t parts < <(ls "${part_prefix}"*)
    pids=()
    for idx in "${!parts[@]}"; do
        local logfile
        logfile=$(mktemp -t pgclone_rsync_"${module}"_"${idx}".XXXX)
        RSYNC_LOGFILES+=("$logfile")
        (
            rsync -a --relative --inplace \
                  --exclude 'pgsql_tmp*' \
                  --exclude 'pg_internal.init' \
                  "${rsync_log_args[@]}" \
                  --files-from="${parts[$idx]}" \
                  --password-file="$RSYNC_SECRET_FILE" \
                  "rsync://replica@$PGHOST:$RSYNC_PORT/$module/" "$dst/" \
                  >"$logfile" 2>&1
        ) &
        pids+=($!)
    done

    # Wait for all rsync workers to finish
    for p in "${pids[@]}"; do wait "$p"; done

    # print rsync worker logs if verbose
    if [[ "$VERBOSE" == "1" ]]; then
        for idx in "${!RSYNC_LOGFILES[@]}"; do
            if [[ -s "${RSYNC_LOGFILES[$idx]}" ]]; then
                echo
                echo "====== rsync worker $((idx + 1)) output log start ======"
                cat  "${RSYNC_LOGFILES[$idx]}"
                echo "====== rsync worker $((idx + 1)) output log end ======"
                echo
            fi
        done
    fi

    # Cleanup temporary files
    for f in "${RSYNC_LOGFILES[@]}"; do rm -f "$f"; done
    rm -f "$file_raw" "$file_sorted" "${part_prefix}"*

    # Clear the logfiles array for the next run
    RSYNC_LOGFILES=() 
}

### MAIN SCRIPT STARTS HERE ###

# ==== Parse arguments ====
print_usage () {
    cat <<EOF
Usage: pgclone [OPTIONS]

  --pghost           Primary host
  --pgport           Primary port (default 5432)
  --pguser           Primary user
  --primary-pgdata   Primary PGDATA path
  --replica-pgdata   Replica PGDATA path
  --replica-waldir   Replica pg_wal path
  --ssh-key          SSH private key file
  --ssh-user         SSH user (login on primary host)
  --temp-waldir      Temporary WAL directory
  --parallel         Number of parallel rsync jobs (default 4)
  --verbose          Verbose output
  -v, --version      Print version and exit
  -h, --help         Show this help and exit
EOF
}

show_help=0
show_version=0

# short options: h v V
# long  options are handled through the leading '-' case in getopts
while getopts ':hv-:' opt; do
    case "$opt" in
        -)  # long option: --foo or --foo=bar
            long="${OPTARG}"
            if [[ $long == *=* ]]; then
                val="${long#*=}"
                long="${long%%=*}"
                have_val=1
            else
                val=""
                have_val=0
            fi

            needs_arg=1
            case "$long" in
                verbose)   VERBOSE=1;               needs_arg=0 ;;
                help)      show_help=1;             needs_arg=0 ;;
                version)   show_version=1;          needs_arg=0 ;;
                pghost)           ;;
                pgport)           ;;
                pguser)           ;;
                primary-pgdata)   ;;
                replica-pgdata)   ;;
                replica-waldir)   ;;
                ssh-key)          ;;
                ssh-user)         ;;
                temp-waldir)      ;;
                parallel)         ;;
                *) fatal "Unknown option --$long" ;;
            esac

            # if the option requires an argument, check if we have it
            if (( needs_arg && ! have_val )); then
                val="${!OPTIND-}"
                if [[ -z $val || $val == -* ]]; then
                    fatal "Option --$long requires a value"
                fi
                OPTIND=$((OPTIND+1))
            fi

            case "$long" in
                pghost)           PGHOST="$val" ;;
                pgport)           PGPORT="$val" ;;
                pguser)           PGUSER="$val" ;;
                primary-pgdata)   PRIMARY_PGDATA="$val" ;;
                replica-pgdata)   REPLICA_PGDATA="$val" ;;
                replica-waldir)   REPLICA_WALDIR="$val" ;;
                ssh-key)          SSH_KEY="$val" ;;
                ssh-user)         SSH_USER="$val" ;;
                temp-waldir)      TEMP_WALDIR="$val" ;;
                parallel)         PARALLEL="$val" ;;
            esac
            ;;
        h) show_help=1    ;;
        v) show_version=1 ;;
        \?) fatal "Unknown option -$OPTARG" ;;
    esac
done
shift $((OPTIND-1))

if (( show_version )); then
    echo "pgclone version $PGCLONE_VERSION"
    exit 0
fi
if (( show_help )); then
    print_usage
    exit 0
fi

# Logging script version
log "pgclone script version $PGCLONE_VERSION"

# ==== Validate ====
: "${PGHOST:?--pghost required}"
: "${PGUSER:?--pguser required}"
: "${PRIMARY_PGDATA:?--primary-pgdata required}"
: "${REPLICA_PGDATA:?--replica-pgdata required}"
: "${SSH_KEY:?--ssh-key required}"
: "${SSH_USER:?--ssh-user required}"
[[ -z "${PGPASSWORD:-}" ]] && fatal "PGPASSWORD env variable is required"
[[ "$PGPORT"    =~ ^[0-9]+$ ]] || fatal "Invalid port"
[[ "$PARALLEL"  =~ ^[0-9]+$ ]] || fatal "Invalid parallel"

TEMP_WALDIR="${TEMP_WALDIR:-$(mktemp -d -t pgclone_temp.XXXX)}"
REPLICA_WALDIR="${REPLICA_WALDIR:-$REPLICA_PGDATA/pg_wal}"

validate_ssh_key "$SSH_KEY"
mkdir -p "$REPLICA_PGDATA" "$REPLICA_WALDIR" "$TEMP_WALDIR"

SSH_OPTS=("-i" "$SSH_KEY" "-o" "BatchMode=yes" "-o" "StrictHostKeyChecking=no")

# ==== Check that we are not running as root ====
if [[ "$(id -u)" -eq 0 ]]; then
  fatal "This script must not be run as root"
fi

# ==== Check tools ====
for t in ssh psql pg_ctl pg_receivewal rsync find du split awk sha256sum od; do
    command -v "$t" >/dev/null || fatal "$t not found"
done

# ==== Protect against concurrent runs of pgclone for the same replica data directory. ====
# The lock is automatically released when the script exits.
REPLICA_PGDATA_ABS=$(readlink -f "$REPLICA_PGDATA")
LOCK_FILE="/tmp/pgclone_$(echo -n "$REPLICA_PGDATA_ABS" | sha256sum | cut -d' ' -f1).lock"
exec 200>"$LOCK_FILE"
flock -n 200 || fatal "Another pgclone is running for $REPLICA_PGDATA_ABS (lock: $LOCK_FILE)"

# ==== Check that Postgres is NOT running on target replica PGDATA ====
PIDFILE="$REPLICA_PGDATA/postmaster.pid"
if [[ -f "$PIDFILE" ]]; then
    pid=$(head -n1 "$PIDFILE" | tr -d '[:space:]')
    if [[ "$pid" =~ ^[0-9]+$ ]]; then
        # Check if the process is still running and is a PostgreSQL process
        if pg_ctl -D "$REPLICA_PGDATA" status >/dev/null 2>&1; then
            fatal "PostgreSQL appears to be running in $REPLICA_PGDATA (PID $pid). Stop it before proceeding."
        fi
    fi
fi

# ==== Check SSH connection ====
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "echo OK" >/dev/null ||
    fatal "SSH test failed"

# ==== Disk space check ====
declare -A fs_need_kb=()  # mount_point -> required_kilobytes

# pgdata
primary_size_mb=$(estimate_primary_size_mb)
fs_pgdata=$(df -P "$REPLICA_PGDATA" | awk 'NR==2{print $6}')
fs_need_kb[$fs_pgdata]=$(( ${fs_need_kb[$fs_pgdata]:-0} + primary_size_mb*1024 ))

# tablespaces
discover_tablespaces
for oid in "${!TBLSPCS[@]}"; do
    dst=${TBLSPCS_DST[$oid]}
    mkdir -p "$dst"
    mp=$(df -P "$dst" | awk 'NR==2{print $6}')
    fs_need_kb[$mp]=$(( ${fs_need_kb[$mp]:-0} + ${TBLSPCS_SIZE_KB[$oid]} ))
done

# check space on replica
check_space fs_need_kb

# ==== Open persistent psql session ====
log "Open persistent psql session..."
PSQL_IN=$(mktemp -u)
PSQL_OUT=$(mktemp -u)
mkfifo "$PSQL_IN" "$PSQL_OUT"

PGPASSWORD="$PGPASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -w -X -A -t <"$PSQL_IN" >"$PSQL_OUT" &
PSQL_PID=$!
exec 3>"$PSQL_IN"
psql_send() { echo "$1" >&3; }
psql_wait() { grep -m 1 . <"$PSQL_OUT"; }

# ==== PostgreSQL version ====
psql_send "SHOW server_version_num;"
ver=$(psql_wait | tr -d '[:space:]')
[[ -z "$ver" ]] && fatal "Could not retrieve PostgreSQL version"
[[ "$ver" -ge 150000 ]] || fatal "PostgreSQL >= 15 required"

# ==== Start pg_receivewal (no slot) ====
PG_RCV_APPNAME="pgclone-$$"      # unique application_name for this run
log "Starting pg_receivewal (appname=$PG_RCV_APPNAME, no slot)..."
if [[ "$VERBOSE" == "1" ]]; then
    pg_rwal_args+=(--verbose)
else
    pg_rwal_args+=()
fi
find "$TEMP_WALDIR" -mindepth 1 -delete
PGAPPNAME="$PG_RCV_APPNAME" pg_receivewal \
    --host="$PGHOST" --port="$PGPORT" --username="$PGUSER" \
    --no-password --directory="$TEMP_WALDIR" \
    "${pg_rwal_args[@]}" >"$TEMP_WALDIR/pg_receivewal.log" 2>&1 &
PG_RECEIVEWAL_PID=$!
sleep 3
kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null || fatal "pg_receivewal failed"

# ==== Watchdog for pg_receivewal ====
(
    main_pid=$PPID                     # actual PID of the main script
    while kill -0 "$main_pid" 2>/dev/null; do
        sleep 1
    done
    log "[watchdog] Main process $main_pid died -> terminating pg_receivewal PID=$PG_RECEIVEWAL_PID"
    watchdog_terminate "$PG_RECEIVEWAL_PID" "pg_receivewal"
) &
PG_RECEIVEWAL_WATCHDOG_PID=$!

wait_for_replication_start "$PG_RCV_APPNAME"

# ==== Backup start ====
psql_send "SELECT * FROM pg_backup_start('pgclone', true);"
START_LSN=$(psql_wait | awk -F '|' '{print $1}' | tr -d '[:space:]')
validate_lsn_format "$START_LSN"
log "Backup start LSN: $START_LSN"

# ==== Parallel rsync sync (rsyncd + watchdog on replica) ====
log "Setting up parallel rsync with rsyncd on master..."

RSYNC_SECRET=$(head -c 12 /dev/urandom | od -An -tx1 | tr -d ' \n')
RSYNC_SECRET_FILE=$(mktemp)
echo "$RSYNC_SECRET" > "$RSYNC_SECRET_FILE"
chmod 600 "$RSYNC_SECRET_FILE"

PGDATA_HASH=$(echo -n "$PRIMARY_PGDATA" | sha256sum | cut -c1-16)
RSYNCD_TAG="pgclone_$PGDATA_HASH"

REMOTE_DIR="/tmp/${RSYNCD_TAG}"
REMOTE_CONF="$REMOTE_DIR/rsyncd.conf"
REMOTE_SECR="$REMOTE_DIR/rsyncd.secrets"
REMOTE_PID="$REMOTE_DIR/rsyncd.pid"
REMOTE_PORT="$REMOTE_DIR/rsyncd.port"
# this lock is used to ensure that only one rsyncd instance is running
# for the same PGDATA at a time
# it is not rsync's lock (determined by lock file parameter in rsyncd.conf)
REMOTE_LOCK="$REMOTE_DIR/lock"


tbl_cnt=${#TBLSPCS[@]}            # 0, if array is empty
max_conn=$(( PARALLEL * (tbl_cnt + 2) ))

RSYNCD_CONF=$(cat <<EOF
use chroot = no
max connections = $max_conn
pid file = $REMOTE_PID
log file = $REMOTE_DIR/rsyncd.log
lock file = $REMOTE_DIR/rsyncd.lock

[pgdata]
    path = $PRIMARY_PGDATA
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR

[base]
    path = $PRIMARY_PGDATA/base
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR
EOF
)

# add sections for tablespaces (if any)
for oid in "${!TBLSPCS[@]}"; do
    RSYNCD_CONF+="
[spc_$oid]
    path = ${TBLSPCS[$oid]}
    read only = yes
    auth users = replica
    secrets file = $REMOTE_SECR

"
    log "Added tablespace OID=$oid to rsyncd config"
done

# shellcheck disable=SC2029
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "mkdir -p '$REMOTE_DIR'"
# check if rsyncd is already running for this PGDATA
# shellcheck disable=SC2029
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "exec 9> $REMOTE_LOCK && flock -n 9 || { echo 'rsyncd already running for this PGDATA'; exit 1; }"
# shellcheck disable=SC2029
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "cat > '$REMOTE_CONF'" <<<"$RSYNCD_CONF"
# shellcheck disable=SC2029
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" "echo 'replica:$RSYNC_SECRET' > '$REMOTE_SECR' && chmod 600 '$REMOTE_SECR'"

log "Starting rsyncd daemon on master via SSH..."
ssh -tt "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" \
  "RSYNCD_PORT_RANGE='$RSYNCD_PORT_RANGE' TARGET_HOST='$PGHOST' \
   REMOTE_DIR='$REMOTE_DIR' REMOTE_LOCK='$REMOTE_LOCK' \
   REMOTE_CONF='$REMOTE_CONF' REMOTE_PORT='$REMOTE_PORT' \
  bash -s" <<'REMOTE_RS' >/dev/null 2>&1 &
set -euo pipefail

exec 9> $REMOTE_LOCK
flock -n 9 || { echo 'rsyncd already running for this PGDATA'; exit 1; }

cleanup() {
    [[ -n "${rsyncd_pid:-}" ]] && kill -9 "$rsyncd_pid" 2>/dev/null || true
    [[ -n "${rsyncd_pid:-}" ]] && wait "$rsyncd_pid" 2>/dev/null || true
    rm -rf $REMOTE_DIR
}
trap cleanup EXIT INT TERM

# --- get UP for --pghost ---
if [[ "$TARGET_HOST" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    BIND_IP="$TARGET_HOST"
else
    BIND_IP=$(getent ahosts "$TARGET_HOST" | awk 'NR==1{print $1}')
fi

# --- select available TCP port from RSYNCD_PORT_RANGE ---
pmin="${RSYNCD_PORT_RANGE%%..*}"
pmax="${RSYNCD_PORT_RANGE##*..}"
RSYNC_PORT=""
for ((p=pmin; p<=pmax; p++)); do
    (echo >/dev/tcp/$BIND_IP/$p) >/dev/null 2>&1 && continue   # occupied on this IP
    RSYNC_PORT=$p; break                                       # available
done
[[ -z "$RSYNC_PORT" ]] && { echo "no free port"; exit 1; }
echo "$RSYNC_PORT" > "$REMOTE_PORT"

rsync --daemon --no-detach --config=$REMOTE_CONF --port=$RSYNC_PORT &
rsyncd_pid=$!
wait
REMOTE_RS
RSYNCD_SSH_PID=$!

# Watchdog: if main process dies, kill ssh (which stops rsyncd)
(
    main_pid=$PPID
    while kill -0 "$main_pid" 2>/dev/null; do
        sleep 1
    done
    log "[watchdog] Main process $main_pid died ⇒ terminating rsyncd-ssh PID=$RSYNCD_SSH_PID"
    watchdog_terminate "$RSYNCD_SSH_PID" "rsyncd ssh session"
) &
RSYNCD_WATCHDOG_PID=$!

# Get rsyncd port from remote
timeout_sec=$RSYNCD_GET_PORT_TIMEOUT
t_start=$(date +%s)
# shellcheck disable=SC2029
while true; do
    RSYNC_PORT=$(ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" \
                 "cat '$REMOTE_PORT' 2>/dev/null" || true)
    [[ -n "$RSYNC_PORT" ]] && break
    (( $(date +%s) - t_start >= timeout_sec )) && fatal "Failed to retrieve rsyncd port within ${timeout_sec}s"
    sleep 1
done

[[ -z "$RSYNC_PORT" ]] && fatal "Failed to retrieve rsyncd port"
log "Using rsync port $RSYNC_PORT"

# Setup rsync log arguments
rsync_log_args=()
[[ "$VERBOSE" == "1" ]] && rsync_log_args+=(--stats --human-readable)

# ==== Initial rsync of all PGDATA except pg_wal and base, transient and temp files ====
log "Initial rsync of PGDATA (excluding base, pg_wal, transient and temp files)..."
rsync -a --delete \
    --exclude 'pg_wal/' \
    --exclude 'base/' \
    --exclude 'postmaster.pid' \
    --exclude 'postmaster.opts' \
    --exclude 'pg_replslot/' \
    --exclude 'pg_dynshmem/' \
    --exclude 'pg_notify/' \
    --exclude 'pg_serial/' \
    --exclude 'pg_snapshots/' \
    --exclude 'pg_stat_tmp/' \
    --exclude 'pg_subtrans/' \
    --exclude 'pgsql_tmp*' \
    --exclude 'pg_internal.init' \
    "${rsync_log_args[@]}" \
    --password-file="$RSYNC_SECRET_FILE" \
    "rsync://replica@$PGHOST:$RSYNC_PORT/pgdata/" "$REPLICA_PGDATA/"

# Ensure empty base directory exist
mkdir -p "$REPLICA_PGDATA/base"

log "Parallel rsync of base directory..."
parallel_rsync_module "base" "$REPLICA_PGDATA/base"
log "Base synced"

log "Parallel rsync of tablespaces..."
for oid in "${!TBLSPCS[@]}"; do
    log "Syncing tablespace OID=$oid (${TBLSPCS[$oid]})..."
    parallel_rsync_module "spc_$oid" "${TBLSPCS_DST[$oid]}"
done
log "Tablespaces synced"

rm -f "$RSYNC_SECRET_FILE"

# Create empty subdirs for excluded runtime directories
for d in pg_replslot pg_dynshmem pg_notify pg_serial pg_snapshots pg_stat_tmp pg_subtrans; do
    mkdir -p "$REPLICA_PGDATA/$d"
done

# Ensure empty pg_wal directory exists as a pgdata subdir
if [[ "${REPLICA_WALDIR%/}" != "${REPLICA_PGDATA%/}/pg_wal" ]]; then
    # If pg_wal is a separate directory, create a symlink in the pgdata directory
    ln -s -f "$REPLICA_WALDIR" "$REPLICA_PGDATA/pg_wal"
else
    # If pg_wal is the subdir of pgdata, we need to ensure it exists
    mkdir -p "$REPLICA_PGDATA/pg_wal"
fi

log "Parallel rsync done"

# ==== Stop backup ====
log "Stopping backup..."
psql_send "
SELECT lsn,
       translate(encode(labelfile::bytea,  'base64'), E'\n', '') AS lab_b64,
       translate(encode(spcmapfile::bytea, 'base64'), E'\n', '') AS map_b64
FROM   pg_backup_stop(true);
"

IFS='|' read -r STOP_LSN BLABEL_B64 SPCMAP_B64 < <(psql_wait || fatal "pg_backup_stop failed")

printf '%s' "$BLABEL_B64" | base64 --decode > "$REPLICA_PGDATA/backup_label"
[[ -n $SPCMAP_B64 ]] && printf '%s' "$SPCMAP_B64" | base64 --decode > "$REPLICA_PGDATA/tablespace_map"

# Copy fresh pg_control produced by pg_backup_stop()
# shellcheck disable=SC2029
ssh "${SSH_OPTS[@]}" "$SSH_USER@$PGHOST" \
    "cat $(shquote "$PRIMARY_PGDATA")/global/pg_control" \
    > "$REPLICA_PGDATA/global/pg_control"

log "Backup stopped at LSN $STOP_LSN and control files written"

log "Closing persistent psql session..."
psql_send '\q'
wait_and_kill_process "$PSQL_PID" "persistent psql session"
rm -f "$PSQL_IN" "$PSQL_OUT"

# We must be certain the WAL segment that contains STOP_LSN is present on the replica
# *before* we stop pg_receivewal.  Otherwise the standby will ask for that segment
# during recovery and may fail with:
#   “requested WAL segment ... has already been removed”
# because the primary could recycle it while the replica never downloaded it.
# Therefore we determine the exact filename
# for STOP_LSN and wait until that file shows up in TEMP_WALDIR.

STOP_WALFILE=$(
  PGPASSWORD="$PGPASSWORD" \
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -w -X -A -t \
    -c "SELECT pg_walfile_name('$STOP_LSN');" | tr -d '[:space:]'
)
log "Waiting for WAL file $STOP_WALFILE..."

t0=$(date +%s)
timeout=$WAL_WAIT_TIMEOUT
while [[ ! -f "$TEMP_WALDIR/$STOP_WALFILE" ]]; do
    (( $(date +%s) - t0 > timeout )) && fatal "WAL $STOP_WALFILE not received in $timeout s"
    sleep 1
done
log "WAL $STOP_WALFILE received"

# ==== Stop pg_receivewal ====
# We should stop pg_receivewal explicitly here, because we need stable files in TEMP_WALDIR
# before we move them to the final WAL directory.
log "Stopping pg_receivewal..."
if kill -0 "$PG_RECEIVEWAL_PID" 2>/dev/null; then
    kill -TERM "$PG_RECEIVEWAL_PID" 2>/dev/null
    wait_and_kill_process "$PG_RECEIVEWAL_PID" "pg_receivewal"
    kill -TERM "$PG_RECEIVEWAL_WATCHDOG_PID" 2>/dev/null
    wait_and_kill_process "$PG_RECEIVEWAL_WATCHDOG_PID" "pg_receivewal watchdog"
fi
# We stops pg_receivewal and its watchdog here, so we should not do it on cleanup.
PG_RECEIVEWAL_PID=""
PG_RECEIVEWAL_WATCHDOG_PID=""

# ==== Move WAL files ====
log "Moving WAL to $REPLICA_WALDIR..."
find "$TEMP_WALDIR" -type f -exec mv -f {} "$REPLICA_WALDIR/" \;
find "$TEMP_WALDIR" -mindepth 1 -delete

# Find the lexicographically last *.partial in REPLICA_WALDIR and remove the .partial suffix.
# This is needed to handle the case when pg_receivewal was interrupted
# while writing a WAL segment, leaving a file with .partial suffix.
last_partial=$(find "$REPLICA_WALDIR" -maxdepth 1 -type f -name '*.partial' \
                   -printf '%P\n' | sort | tail -n1)

if [[ -n "$last_partial" ]]; then
    mv -f "$REPLICA_WALDIR/$last_partial" \
          "$REPLICA_WALDIR/${last_partial%.partial}"
    log "Partial WAL segment renamed: $last_partial -> ${last_partial%.partial}"
fi

# ==== Final checks ====
for f in PG_VERSION postgresql.conf pg_hba.conf; do
    [[ -f "$REPLICA_PGDATA/$f" ]] || fatal "Missing file: $f"
done
wal_count=$(find "$REPLICA_WALDIR" -type f -name '[0-9A-F]*' | wc -l)
[[ "$wal_count" -gt 0 ]] || fatal "No WAL files in $REPLICA_WALDIR, see pg_walreceiver log $REPLICA_WALDIR/pg_receivewal.log"
rm -f "$REPLICA_WALDIR/pg_receivewal.log"
log "Found $wal_count WAL files in $REPLICA_WALDIR"

chmod 700 "$REPLICA_PGDATA" "$REPLICA_WALDIR" || log "chmod failed"

log "Replica prepared. Don't forget:"
log "  1. Create standby.signal in $REPLICA_PGDATA"
log "  2. Configure postgresql.conf with primary_conninfo"
log "  3. Start PostgreSQL"

exit 0
